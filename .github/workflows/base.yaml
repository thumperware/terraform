name: 'Pull request trigger'

on:
  workflow_call:
    inputs:
      tf_workspace:
        required: true
        type: string
    secrets:
      # This is holding the content of mailbox-gcp-token.json
      gcp_credentials:
        required: true
      pg_username:
        required: false
      pg_password:
        required: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        name: 'Setup GC Auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.gcp_credentials }}'

      - name: Set terraform log level
        run: export TF_LOG=DEBUG

      # Setup gcloud CLI
      - name: 'Setup GC SDK/CLI'
        uses: 'google-github-actions/setup-gcloud@v1'

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir=${{ inputs.tf_workspace }} init

      # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan with db credentials
        env:
          pg_username: ${{ secrets.pg_username }}
          pg_password: ${{ secrets.pg_password }}
        if: ${{ env.pg_username != null && env.pg_password != null }}
        run: terraform -chdir=${{ inputs.tf_workspace }} plan -input=false -var="pg_username=${{ secrets.pg_username }}" -var="pg_password=${{ secrets.pg_password }}"

      # Generates an execution plan for Terraform
      - name: Terraform Plan without credentials
        env:
          pg_username: ${{ secrets.pg_username }}
          pg_password: ${{ secrets.pg_password }}
        if: ${{ env.pg_username == null && env.pg_password == null }}
        run: terraform -chdir=${{ inputs.tf_workspace }} plan -input=false

      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
      # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply with db credentials
        env:
          pg_username: ${{ secrets.pg_username }}
          pg_password: ${{ secrets.pg_password }}
        if: ${{ env.pg_username != null && env.pg_password != null }}
        run: terraform -chdir=${{ inputs.tf_workspace }} apply -input=false -var="pg_username=${{ secrets.pg_username }}" -var="pg_password=${{ secrets.pg_password }}" -auto-approve

      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
      # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply without db credentials
        env:
          pg_username: ${{ secrets.pg_username }}
          pg_password: ${{ secrets.pg_password }}
        if: ${{ env.pg_username == null && env.pg_password == null }}
        run: terraform -chdir=${{ inputs.tf_workspace }} apply -input=false -auto-approve

      ########## TO DESTROY ##########
      # - name: Terraform  Validate
      #   run: terraform -chdir=${{ inputs.tf_workspace }} validate

      # - name: Terraform Destroy
      #   run: |
      #     terraform -chdir=${{ inputs.tf_workspace }} apply -input=false -destroy -auto-approve
